generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String?
  avatar    String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]
  agents   Agent[]
  sessions Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String?
  status      String       @default("PLANNING")
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  stories Story[]
  agents  ProjectAgent[]

  @@map("projects")
}

model Agent {
  id            String     @id @default(uuid())
  name          String
  type          String
  description   String?
  status        String      @default("STOPPED")
  configuration String?
  systemPrompt  String?
  userId        String
  lastActivity  DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectAgents    ProjectAgent[]
  conversations    Conversation[]
  storyAssignments StoryAgent[]

  @@map("agents")
}

model ProjectAgent {
  id        String   @id @default(uuid())
  projectId String
  agentId   String
  role      String?
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  agent   Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([projectId, agentId])
  @@map("project_agents")
}

model Story {
  id          String      @id @default(uuid())
  title       String
  description String
  status      String      @default("BACKLOG")
  priority    String      @default("MEDIUM")
  storyPoints Int?
  projectId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  project Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  agents  StoryAgent[]
  tasks   Task[]

  @@map("stories")
}

model StoryAgent {
  id      String @id @default(uuid())
  storyId String
  agentId String
  role    String

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([storyId, agentId])
  @@map("story_agents")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      String     @default("TODO")
  storyId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Conversation {
  id        String   @id @default(uuid())
  agentId   String
  createdAt DateTime @default(now())

  agent    Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(uuid())
  content        String
  role           String
  conversationId String
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CodebaseSnapshot {
  id          String   @id @default(uuid())
  name        String
  description String?
  filePath    String
  format      String   @default("xml")
  size        Int
  projectId   String?
  createdAt   DateTime @default(now())

  @@map("codebase_snapshots")
}

// Enum types replaced with strings for SQLite compatibility